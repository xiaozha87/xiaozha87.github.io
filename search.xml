<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome To Hexo</title>
    <url>/2014/02/23/2014-02-23-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Welcome</tag>
        <tag>How-To</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes On Creating A Hexo Theme</title>
    <url>/2016/01/02/2016-01-02-Notes-On-Creating-A-Hexo-Theme/</url>
    <content><![CDATA[<div class="image-strip"><br><img src="https://s3.amazonaws.com/ptsteadman-images/hexo.png"><br></div>

<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>To Update NPM: <code>npm install npm@latest -g</code>.</p>
<p>In 2015 it makes sense to use NVM.  <a href="http://linoxide.com/ubuntu-how-to/install-node-js-ubuntu" target="_blank" rel="noopener">NVM Installation<br>Instructions</a>.</p>
<p>Update NPM: <code>npm install npm@latest -g</code></p>
<p>Hexo: why can’t you use helper functions in source code?<br>This should be in docs.</p>
<h2 id="Creating-a-Custom-Index-File-in-Hexo"><a href="#Creating-a-Custom-Index-File-in-Hexo" class="headerlink" title="Creating a Custom Index File in Hexo"></a>Creating a Custom Index File in Hexo</h2><p>Trying to generate a custom index file in source, hexo would ignore<br><code>source/index.md</code> no matter what I did.  What I had to do was uninstall<br><code>hexo-generator-index</code>.  <a href="https://github.com/hexojs/hexo/issues/1077" target="_blank" rel="noopener">See<br>here</a>.  Then it works.  So, that<br>will be part of the setup for my theme.  But, it’s worth it in order to properly<br>seperate the theme from the content, I think.  Having everyone edit the theme<br>index.ejs template is no good.</p>
<h2 id="Hexo-Rendering-Raw-EJS-File-Problem-I-Encountered"><a href="#Hexo-Rendering-Raw-EJS-File-Problem-I-Encountered" class="headerlink" title="Hexo Rendering Raw EJS File Problem I Encountered"></a>Hexo Rendering Raw EJS File Problem I Encountered</h2><p>Sometimes the server would keep rendering an old version of my code, but as<br>text.  So I’d see stuff like</p>
<pre><code>&lt;% if (site.tags.length){ %&gt;
</code></pre><p>The raw ejs, essentially.  Restarting the server or running <code>hexo clean</code> didn’t<br>do anything.</p>
<p>After some time, I realized it was due to the gedit swap files being read by<br>hexo as the actual layout files: for example, <code>tag.ejs~</code>.  My <code>partial</code> helpers<br>looked like: <code>&lt;%- partial(&#39;_partials/tag&#39;) %&gt;</code>, and apparently hexo was reading<br>in <code>tag.ejs~</code> instead of <code>tag.ejs</code>.  And therefore, the ejs wasn’t rendering.</p>
<p>To fix this, I simply changed my partial helper to <code>&lt;%-
partial(&#39;_partials/tag.ejs&#39;) %&gt;</code>.  Problem solved.</p>
<h2 id="Hexo-Excerpt-Variable"><a href="#Hexo-Excerpt-Variable" class="headerlink" title="Hexo Excerpt Variable"></a>Hexo Excerpt Variable</h2><p>I was confused by the behavior of the hexo <code>excerpt</code> variable.  If you define<br><code>excerpt: something</code> in the front matter, hexo ignores that.  Instead, to get it<br>to work, one needs to add a <code>&lt;!-- more --&gt;</code> comment in the source of the post.<br>Or, you can install a plugin that allows you to define custom excerpt in the<br>front matter.</p>
<h2 id="Scripts-Directory"><a href="#Scripts-Directory" class="headerlink" title="Scripts Directory"></a>Scripts Directory</h2><p>One of the things I really discovered too late is the “Scripts” directory in the<br>theme folder.  In Hexo, the various plugins drive the structure of the site, as<br>opposed to the placement of different files and directories, as in Jekyll.  The<br>plugins programatically create folder structure, etc, where in Jekyll I mostly<br>used the liquid markup to structure the site.  </p>
<p>The problem is, then, that the user wants to extend hexo to do some sort of<br>custom thing.  If one had to publish a new plugin, that’d be too much work.  But<br>the theme level scripts folder allows one to extend the base hexo functionality<br>in ‘user space’ effectively.</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Programming</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 Nginx+PHP框架laravel状态码500错误解决！</title>
    <url>/2018/08/25/CentOS7-Nginx-PHP-Laravel-500-error/</url>
    <content><![CDATA[<p>Laravel安装完成后的权限设置，要给<code>storage</code>，<code>bootstrap/cache</code>目录可写权限，<code>chmod +x storage</code>。</p>
<p>我用的环境是lnmp一键安装,配置完成之后我还是不能访问，报500错误。</p>
<p>首先开启php.ini中的错误提示：<code>display_error=on;</code>（PHP7.x的调试默认是OFF）。开启后发现，lnmp一键安装的环境中，在nginx的配置文件中有两处设置了open_basedir参数。</p>
<p>由于laravel框架的入口文件不再项目根目录，而在public目录下，当我在lnmp中用lnmp vhost add命令添加虚拟主机并将域名制定到public目录下时，会在public目录下生成.user.ini文件，<br><a id="more"></a><br>里边的内容是：<code>open_basedir=/home/wwwroot/blog/public:/tmp/:/proc/</code>，所以导致laravel请求不到public目录意外的文件而报错。</p>
<p>还有一处实在nginx的配置文件中/usr/local/nginx/conf/fastcgi.conf的最后有类似的配置：<code>fastcgi_param PHP_ADMIN_VALUE &quot;open_basedir=$document_root/:/tmp/:/proc/&quot;;</code>，</p>
<p>这句代表open_basedir的目录跟你的站点目录相同（public），跟上边一样的效果，可以直接对这句进行了注释，或者将项目目录加入<code>fastcgi_param PHP_ADMIN_VALUE &quot;open_basedir=$document_root/:/tmp/:/proc/:/home/wwwroot/laravel/&quot;;</code>，</p>
<p>然后重启lnmp即可解决问题。</p>
]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7搭建Git服务器</title>
    <url>/2018/08/25/Centos7-Deploy-Git-Server/</url>
    <content><![CDATA[<p>环境说明</p>
<ul>
<li>CentOS 7.x 最小安装</li>
<li>配置网络连接</li>
</ul>
<h1 id="1-安装Git及创建用户"><a href="#1-安装Git及创建用户" class="headerlink" title="1. 安装Git及创建用户"></a>1. 安装Git及创建用户</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Git</span></span><br><span class="line">$ yum install git</span><br><span class="line">$ git --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个git用户组和用户，用来运行git服务</span></span><br><span class="line">$ groupadd git</span><br><span class="line">$ adduser git -g git</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>禁止git用户登录,修改/etc/passwd文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到这句：</span></span><br><span class="line">git:x:503:503::/home/git:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为：</span></span><br><span class="line">git:x:503:503::/home/git:/bin/git-shell</span><br></pre></td></tr></table></figure>
<h1 id="2-创建证书登录"><a href="#2-创建证书登录" class="headerlink" title="2. 创建证书登录"></a>2. 创建证书登录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /home/git/.ssh</span><br><span class="line">$ chmod 700 /home/git/.ssh</span><br><span class="line">$ touch 700 /home/git/.ssh/authorized_keys</span><br><span class="line">$ chmod 600 /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>注意，如果是采用的sudo方式来创建git和相应的文件的，需要设置/home/git/.ssh/的owner为git，否则还是每次要输入密码的。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># owner改为git</span></span><br><span class="line">$ sudo chown -R git:git /home/git/.ssh/</span><br></pre></td></tr></table></figure></p>
<p>编辑<code>/home/git/.ssh/authorized_keys</code>，把客户端的公钥id_rsa.pub放进去，1个公钥1行。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建私钥，文件位于用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure></p>
<p>在服务器端打开RSA认证,在文件/etc/ssh/sshd_config中添加或者修改下列三行内容:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>
<h1 id="3-初始化Git仓库"><a href="#3-初始化Git仓库" class="headerlink" title="3.初始化Git仓库"></a>3.初始化Git仓库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /srv</span><br><span class="line">$ mkdir gitrepo</span><br><span class="line">$ chown git:git gitrepo/</span><br><span class="line">$ <span class="built_in">cd</span> gitrepo //切换到希望创建工作区的目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个空的Git仓库，服务器上的Git仓库通常都以.git结尾,会创建一个唯一分支master</span></span><br><span class="line">$ git init --bare project.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将仓库所属用户改为git</span></span><br><span class="line">$ chown -R git:git project.git</span><br></pre></td></tr></table></figure>
<h1 id="4-克隆仓库"><a href="#4-克隆仓库" class="headerlink" title="4. 克隆仓库"></a>4. 克隆仓库</h1><p>在另一台电脑上（下面称为：Client），安装git，并且运行下面的命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@10.10.10.10:/srv/gitrepo/project.git</span><br></pre></td></tr></table></figure></p>
<h1 id="5-验证安装"><a href="#5-验证安装" class="headerlink" title="5. 验证安装"></a>5. 验证安装</h1><h2 id="5-1-推送到远程服务器"><a href="#5-1-推送到远程服务器" class="headerlink" title="5.1. 推送到远程服务器"></a>5.1. 推送到远程服务器</h2><p>在本地Client的project目录下，创建一个文件：text.txt，内容随意，然后上传到远端：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
<h2 id="5-2-检验"><a href="#5-2-检验" class="headerlink" title="5.2. 检验"></a>5.2. 检验</h2><p>在本地Client的另外一个目录下，克隆一下：<br><code>$ git clone git@10.10.10.10:/srv/gitrepo/project.git</code><br>看看text.txt文件是否存在，内容是否对。</p>
<h2 id="5-3-常用的Git命令："><a href="#5-3-常用的Git命令：" class="headerlink" title="5.3. 常用的Git命令："></a>5.3. 常用的Git命令：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add . 添加所有文件  注意有个 .</span><br><span class="line">$ git commit -m <span class="string">'注释'</span> 提交本地</span><br><span class="line">$ git push origin master提交给默认分支</span><br><span class="line">$ git -rm 删除</span><br><span class="line">$ git pull origin master 从默认分支下载</span><br><span class="line">$ git branch -v 查看所有分支</span><br></pre></td></tr></table></figure>
<h1 id="6-设置git钩子"><a href="#6-设置git钩子" class="headerlink" title="6. 设置git钩子"></a>6. 设置git钩子</h1><p>进入我们的裸仓库的hooks文件夹，然后新建一个post-receive文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hooks/</span><br><span class="line">$ vim post-receive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在post-receive写入以下内容：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/www/laravel checkout -f</span><br></pre></td></tr></table></figure></p>
<p>/www/laravel为实际需要同步的站点目录。<br>然后修改post-receive为可执行文件（其实这就是一个脚本文件）</p>
<p><code>chmod +x post-receive</code></p>
<p>post-receive的原理就是，当远程仓库发现有用户执行了push操作，就会执行一个脚本post-receive（钩子）。</p>
<p>注意：同时还需要修改web站点目录的权限，修改所属用户与用户组为git，否则钩子的权限可能会不足而导致执行失败。（也可以通过添加git用户到相应的用户组来解决问题）<br><code>chown git:git -R /www    # 修改所属用户</code><br>设置好钩子后，当你本地再次执行push的时候，发现web目录的文件也同步的更新了。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>根据用户id生成唯一邀请码</title>
    <url>/2019/06/27/Generate-Unique-Invitation-Code-Based-On-User-ID/</url>
    <content><![CDATA[<p><strong>错误思路</strong><br>随机生成一个字符串，再将用户id拼接到字符串后面，但是这样id就太明显了，容易暴露，而且如果id很长的话，会导致邀请码很长，不利于用户使用。</p>
<p>所以可以将用户id插入到生成的字符串中，隔一个字符插入一个id的数字，这样id混合在字符串中，不容易暴露，但是长度问题并没有得到优化，于是把隔一个字符插入一个id的数字改为隔一个字符插入两个id的数字。然而长度好像并没有受到太大的影响。<br><strong>正解</strong><br>思考：一个10进制的数字短还是一个16进制的数字短？<br>肯定是16进制相对短一些，所以我们可以直接把用户id转成10+26=36进制的不就可以了吗？具体代码如下：</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCode</span><span class="params">($user_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $source_string = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class="line">    $num = $user_id;</span><br><span class="line">    $code = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span>($num)</span><br><span class="line">    &#123;</span><br><span class="line">        $mod = $num % <span class="number">36</span>;  </span><br><span class="line">        $num = ($num - $mod) / <span class="number">36</span>;</span><br><span class="line">        $code = $source_string[$mod].$code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>邀请码保证了唯一性，并且长度不会太长，用户id也能够根据邀请码反推出来，但是有一点不好的是，别人也可以根据邀请码去反推出user_id，因此，我们需要做一些优化。<br><strong>优化</strong><br>把0剔除，当做补位符号，比如小于六位的邀请码在高位补0，不要0、1、O、I这些容易混淆的字符这样36进制就变成了32进制，然后把字符串顺序打乱，这样，在不知道$source_string的情况下，是没办法解出正确的user_id的。</p>
<p>代码如下：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReferralCode</span><span class="params">($user_id)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> $source_string = <span class="string">'E5FCDG3HQA4BNPJ2RSTUV67MWX89KLYZ'</span>;</span><br><span class="line">	$num = $user_id;</span><br><span class="line">	$code = <span class="string">''</span>;</span><br><span class="line">	<span class="keyword">while</span> ( $num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		$mod = $num % <span class="number">32</span>;</span><br><span class="line">		$num = ($num - $mod) / <span class="number">32</span>;</span><br><span class="line">		$code = $source_string[$mod].$code;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($code[<span class="number">5</span>]))</span><br><span class="line">		$code = str_pad($code,<span class="number">6</span>,<span class="string">'0'</span>,STR_PAD_LEFT);</span><br><span class="line">	<span class="keyword">return</span> $code;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对应user_id的唯一邀请码就生成了，再附一个解码函数：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deReferralCode</span><span class="params">($code)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> $source_string = <span class="string">'E5FCDG3HQA4BNPJ2RSTUV67MWX89KLYZ'</span>;</span><br><span class="line">	<span class="keyword">if</span> (strrpos($code, <span class="string">'0'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">		$code = substr($code, strrpos($code, <span class="string">'0'</span>)+<span class="number">1</span>);</span><br><span class="line">	$len = strlen($code);</span><br><span class="line">	$code = strrev($code);</span><br><span class="line">	$num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class="line">		$num += strpos($source_string, $code[$i]) * pow(<span class="number">32</span>, $i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $num;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常见问题汇总</title>
    <url>/2018/08/27/Git-FAQ/</url>
    <content><![CDATA[<h2 id="1-Git冲突：commit-your-changes-or-stash-them-before-you-can-merge"><a href="#1-Git冲突：commit-your-changes-or-stash-them-before-you-can-merge" class="headerlink" title="1.Git冲突：commit your changes or stash them before you can merge."></a>1.Git冲突：commit your changes or stash them before you can merge.</h2><p>用git pull来更新代码的时候，遇到了下面的问题：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by merge:</span><br><span class="line">    xxx/xxx/xxx.php</span><br><span class="line">Please, commit your changes or stash them before you can merge.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure></p>
<p>出现这个问题的原因是其他人修改了xxx.php并提交到版本库中去了，而你本地也修改了xxx.php，这时候你进行git pull操作就好出现冲突了，解决方法，在上面的提示中也说的很明确了。</p>
<a id="more"></a>
<h3 id="保留本地的修改-的改法"><a href="#保留本地的修改-的改法" class="headerlink" title="保留本地的修改 的改法"></a>保留本地的修改 的改法</h3><p>1）直接commit本地的修改 —-一般不用这种方法</p>
<p>2）通过git stash  —- 通常用这种方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure></p>
<p>然后可以使用git diff -w +文件名 来确认代码自动合并的情况.</p>
<p>通过git stash将工作区恢复到上次提交的内容，同时备份本地所做的修改，之后就可以正常git pull了，git pull完成后，执行git stash pop将之前本地做的修改应用到当前工作区。</p>
<p>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</p>
<p>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</p>
<p>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</p>
<p>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</p>
<h3 id="放弃本地修改-的改法-—-这种方法会丢弃本地修改的代码，而且不可找回"><a href="#放弃本地修改-的改法-—-这种方法会丢弃本地修改的代码，而且不可找回" class="headerlink" title="放弃本地修改 的改法  —-这种方法会丢弃本地修改的代码，而且不可找回"></a>放弃本地修改 的改法  —-这种方法会丢弃本地修改的代码，而且不可找回</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>git将本地文件推送到Github远程仓库</title>
    <url>/2018/08/25/Git-Push-Local-File-To-Git-Server/</url>
    <content><![CDATA[<h3 id="1-在github上创建一个项目：例如-vue-demo"><a href="#1-在github上创建一个项目：例如-vue-demo" class="headerlink" title="1. 在github上创建一个项目：例如 vue-demo"></a>1. 在github上创建一个项目：例如 vue-demo</h3><h3 id="2-在本地vue-demo-项目中使用-git-init-把其变成git可以管理的仓库"><a href="#2-在本地vue-demo-项目中使用-git-init-把其变成git可以管理的仓库" class="headerlink" title="2. 在本地vue-demo 项目中使用 git init 把其变成git可以管理的仓库"></a>2. 在本地vue-demo 项目中使用 git init 把其变成git可以管理的仓库</h3><p><code>git init</code></p>
<h3 id="3-若要忽略本地的文件或文件夹不被提交到github-，则需要在项目根目录下创建-gitignore-文件"><a href="#3-若要忽略本地的文件或文件夹不被提交到github-，则需要在项目根目录下创建-gitignore-文件" class="headerlink" title="3. 若要忽略本地的文件或文件夹不被提交到github ，则需要在项目根目录下创建 .gitignore 文件"></a>3. 若要忽略本地的文件或文件夹不被提交到github ，则需要在项目根目录下创建 .gitignore 文件</h3><p><code>touch .gitignore</code><br><a id="more"></a></p>
<h3 id="4-打开文件，编辑内容，例如："><a href="#4-打开文件，编辑内容，例如：" class="headerlink" title="4. 打开文件，编辑内容，例如："></a>4. 打开文件，编辑内容，例如：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">update.txt</span><br></pre></td></tr></table></figure>
<p>则可以忽略目录下node_modules 文件夹及update.txt 文件.</p>
<p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">配置文件可以在github在线浏览</a></p>
<h3 id="5-添加文件夹下所有文件到暂存区-git-add"><a href="#5-添加文件夹下所有文件到暂存区-git-add" class="headerlink" title="5. 添加文件夹下所有文件到暂存区 git add ."></a>5. 添加文件夹下所有文件到暂存区 git add .</h3><p><code>git add .</code></p>
<h3 id="6-把文件提交到仓库"><a href="#6-把文件提交到仓库" class="headerlink" title="6. 把文件提交到仓库"></a>6. 把文件提交到仓库</h3><p><code>git commit -m &#39;decriptions&#39;</code></p>
<h3 id="7-关联远程仓库-（第一次使用需要添加github公钥）"><a href="#7-关联远程仓库-（第一次使用需要添加github公钥）" class="headerlink" title="7. 关联远程仓库 （第一次使用需要添加github公钥）"></a>7. 关联远程仓库 （第一次使用需要添加github公钥）</h3><p><code>git remote add origin git@github.com:***/vue2.1-sell.git</code><br>或者<br><code>git remote add origin https://github.com/***/vue2.1-sell.git</code></p>
<h3 id="8-获取远程库与本地同步（远程仓库不为空需要这一步）"><a href="#8-获取远程库与本地同步（远程仓库不为空需要这一步）" class="headerlink" title="8. 获取远程库与本地同步（远程仓库不为空需要这一步）"></a>8. 获取远程库与本地同步（远程仓库不为空需要这一步）</h3><p><code>git pull --rebase origin master</code></p>
<h3 id="9-把本地内容推送到远程库-使用-git-push-（第一次需要加-u，后面就不用加了）"><a href="#9-把本地内容推送到远程库-使用-git-push-（第一次需要加-u，后面就不用加了）" class="headerlink" title="9. 把本地内容推送到远程库 使用 git-push,（第一次需要加-u，后面就不用加了）"></a>9. 把本地内容推送到远程库 使用 git-push,（第一次需要加-u，后面就不用加了）</h3><p><code>git push -u origin master</code></p>
<p>以上内容就可以将本地文件推送到github上，并且可以自己设定不需要上传哪些文件</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>git删除文件夹/文件,但不删除本地文件</title>
    <url>/2017/12/23/Github-Delete-Folder-and-Files-But-not-Delete-Local-Files/</url>
    <content><![CDATA[<p><strong>实质就是删除缓冲区里的文件，然后再提交给服务器端。</strong><br>1.首先进入要删除的文件夹或文件的根目录下，如E:\Hexo<br>2.执行下面的语句”directory-name”是相对于本地根目录下的文件夹/文件路径<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached directory-name</span><br><span class="line">git commit -m &apos;Remove  directory &quot;directory-name&quot;&apos;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
<p><code>git pull --rebase origin master</code> 这句的意思是：把github上最新的文件下载下来。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel模型中的动态属性</title>
    <url>/2018/08/30/Laravel-Model-Dynamic-Attribute/</url>
    <content><![CDATA[<p>setxxAttribute 在设置(sql: insert update) 的时候 会将$obj-&gt;xx = ‘value’的时候, 操作数据库之前 自动转化一下</p>
<p>getxxAttribute 在获取xx属性的时候  $obj-&gt;xx 会转化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取之前首字母大写</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstNameAttribute</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ucfirst($value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存入之前的改变</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setFirstNameAttribute</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;attributes[<span class="string">'first_name'</span>] = strtolower($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="#dd0000">注意：使用驼峰格式命名</font><br><a id="more"></a></p>
<h1 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h1><p>一对一关联是很基本的关联。例如一个User模型也许会对应一个Phone。要定义这种关联，我们必须将phone方法放置于User模型上。phone方法应该要返回基类Eloquent上的hasOne方法的结果：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>; </span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="comment">/** * 获取与指定用户互相关联的电话纪录。 */</span> </span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phone</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123; </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'App\Phone'</span>); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传到hasOne方法里的第一个参数是关联模型的类名称。定义好关联之后，我们就可以使用Eloquent的动态属性来获取关联纪录。动态属性让你能够访问关联函数，就像他们是在模型中定义的属性：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$phone = User::find(<span class="number">1</span>)-&gt;phone;</span><br></pre></td></tr></table></figure></p>
<p>但这里只讲了动态属性的最简单的一种形式，也就是调用的属性不存在，但存在同名的方法时，则会调用同名的方法，返回的类型是collection类型（Eloquent的集合）。下文让我们走一遍Laravel的源代码看看还有其他几种不同种类的动态属性。</p>
<h1 id="二、Laravel源代码trace"><a href="#二、Laravel源代码trace" class="headerlink" title="二、Laravel源代码trace"></a>二、Laravel源代码trace</h1><h2 id="1、对于动态属性疑问的产生"><a href="#1、对于动态属性疑问的产生" class="headerlink" title="1、对于动态属性疑问的产生"></a>1、对于动态属性疑问的产生</h2><p>在项目的blade里用到了一个方法，但是user的model里并不存在同名的avatar_src()方法，但是存在一个getAvatarSrcAttribute()名字有点像的方法，当时就觉得很懵逼，看代码的确是调用了这个方法，但不知是如何关联起来的，所以想搞明白这里面的逻辑究竟是怎么回事。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"#"</span>&gt;&lt;img src=<span class="string">"&#123;&#123; Auth::user()-&gt;avatar_src &#125;&#125;"</span> alt=<span class="string">""</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="2、-get"><a href="#2、-get" class="headerlink" title="2、__get()"></a>2、__get()</h2><p>那么问题来了，如何追溯？这里需要的一个预备知识是关于PHP的魔术方法<strong>get()，当读取不可访问属性的值时，</strong>get()会被调用。所以决定从这个方法开始进行追溯。具体的方法是在PhpStorm里打开user模型的代码，在菜单栏选择Navigate-File Structure，弹出的框子里勾选Show inherited members，英文输入状态下输入get可以找到我们想要的方法，点进去可以看到__get()方法源代码如下：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Dynamically retrieve attributes on the model. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $key </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getAttribute($key); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3、getAttribute-key"><a href="#3、getAttribute-key" class="headerlink" title="3、getAttribute($key)"></a>3、getAttribute($key)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Get an attribute from the model. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $key </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttribute</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line">	 <span class="keyword">if</span> (array_key_exists($key, <span class="keyword">$this</span>-&gt;attributes) || <span class="keyword">$this</span>-&gt;hasGetMutator($key)) &#123; </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getAttributeValue($key); </span><br><span class="line">	 &#125; </span><br><span class="line">	 <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getRelationValue($key); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>第一个if的左半边，如果这个model有这个attribute那么就直接返回，没什么可说的。<br>第一个if的右半边mutator是变异体的意思事实上处理了本节开头的疑问，看一下源代码：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Determine if a get mutator exists for an attribute. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $key </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> bool </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasGetMutator</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	<span class="keyword">return</span> method_exists(<span class="keyword">$this</span>, <span class="string">'get'</span>.Str::studly($key).<span class="string">'Attribute'</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>本方法的作用是判断所调用的这个不存在的属性是否存在“按照一定格式变形的类似名字的方法”。所谓的“一定格式”可以参考Studly caps命名法，对应的源代码：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Convert a value to studly caps case.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $value </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> string </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">studly</span><span class="params">($value)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> $key = $value; </span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$studlyCache[$key])) </span><br><span class="line"> &#123; </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">static</span>::$studlyCache[$key]; </span><br><span class="line"> &#125; </span><br><span class="line"> $value = ucwords(str_replace([<span class="string">'-'</span>, <span class="string">'_'</span>], <span class="string">' '</span>, $value)); </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">static</span>::$studlyCache[$key] = str_replace(<span class="string">' '</span>, <span class="string">''</span>, $value); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意到经studly caps处理过的-和_都会被去掉。再回到hasGetMutator($key)这个方法，我们可以看到Laravel会尝试去寻找名字形似getStudlyCapsNameAttribute()的方法，如果有的话则会在getAttribute($key)里返回相关的值。第一小节提到的例子对应的方法名我们可以知道当调用这个不存在的属性avatar_src时，Laravel会尝试调用getAvatarSrcAttribute()这个方法，看了下代码果然是存在这个方法的，开始的疑问解决啦~</p>
<h2 id="4、getRelationValue-key"><a href="#4、getRelationValue-key" class="headerlink" title="4、getRelationValue($key)"></a>4、getRelationValue($key)</h2><p>回到getAttribute($key)这个方法，如果在第一个if里没有返回则会调用getRelationValue($key)这个方法，源代码如下：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Get a relationship. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $key </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelationValue</span><span class="params">($key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	<span class="comment">// If the key already exists in the relationships array, it just means the </span></span><br><span class="line">	<span class="comment">// relationship has already been loaded, so we'll just return it out of </span></span><br><span class="line">	<span class="comment">// here because there is no need to query within the relations twice. </span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;relationLoaded($key)) </span><br><span class="line">	&#123; </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relations[$key]; </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">// If the "attribute" exists as a method on the model, we will just assume </span></span><br><span class="line">	<span class="comment">// it is a relationship and will load and return results from the query </span></span><br><span class="line">	<span class="comment">// and hydrate the relationship's value on the "relationships" array. </span></span><br><span class="line">	<span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, $key)) </span><br><span class="line">	&#123; </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getRelationshipFromMethod($key); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第一个if注释写得很清楚了，第二个if就是判断是否存在和所调用属性同名的方法，如果存在则调用getRelationshipFromMethod($key)方法。</p>
<h2 id="5、getRelationshipFromMethod-method"><a href="#5、getRelationshipFromMethod-method" class="headerlink" title="5、getRelationshipFromMethod($method)"></a>5、getRelationshipFromMethod($method)</h2><p>这个方法比较关键，我们看一下源代码：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Get a relationship value from a method. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $method </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed * </span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> \LogicException </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelationshipFromMethod</span><span class="params">($method)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	$relations = <span class="keyword">$this</span>-&gt;$method(); </span><br><span class="line">	<span class="keyword">if</span> (! $relations <span class="keyword">instanceof</span> Relation) </span><br><span class="line">	&#123; </span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> LogicException(<span class="string">'Relationship method must return an object of type '</span> .<span class="string">'Illuminate\Database\Eloquent\Relations\Relation'</span>); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">$this</span>-&gt;setRelation($method, $results = $relations-&gt;getResults()); </span><br><span class="line">	<span class="keyword">return</span> $results; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意if语句块那里的判断，意味着与属性同名的方法的返回类型必须是Relation类型或者是它的子类，例如hasMany等。所以如果要另外做处理，返回的类型不为Relation的话可以参考第四小节那样的命名法构造相关方法名。另外，setRelation那一行的意思是将没有加载的relation进行加载，那么下次需要时就可以在getRelationValue($key)的第一个if中即返回需要的结果。还有值得注意的是此方法最后的返回值返回的$results是Collection类型，也就是说如果调用不存在的动态属性后返回的是Collection类型，而如果我们直接调用方法返回的则是Relation类型，可以在其上构造查询进一步处理，而再调用getResults()后才能再获得Collection类型的返回值。</p>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux VMWare Device eth0 does not seem to be present,delaying initialization</title>
    <url>/2018/01/11/Linux-VMWare-Device-eth0-does-not-seem-to-be-present-delaying-initialization/</url>
    <content><![CDATA[<p>虚拟机Vmware上克隆了一个CentOS Linx启动时发现找不到网卡，在命令窗口启动网络服务就会遇到”Device eth0 does not seem to be present, delaying initialization“错误。</p>
<h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>克隆的Linux系统在新的机器上运行，新服务器网卡物理地址已经改变。而/etc/udev/rules.d/70-persistent-net.rules这个文件确定了网卡和MAC地址的信息之间的绑定，克隆后的网卡的MAC已经发生了变化，所以导致系统认为网络设备不存在，网络不能正常启动。另外一个就是/etc/sysconfig/network-scripts/ifcfg-eth0里面MAC地址也是以前的旧信息。</p>
<a id="more"></a>
<p>关于/etc/udev/rules.d/70-persistent-net.rules这个文件，系统在启动时会自动监测变化，然后由/lib/udev/write_net_rules写入到/etc/udev/rules.d/70-persistent-net.rules中一个新的配置节，网卡的的序号依次递增（如原来为eth0,则修改第一后生成一个eth1,再次修改后生成一个eth2…）,且其ATTR{address}的值为当前网卡对应的mac地址。 </p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>1.编辑/etc/sysconfig/network-scripts/ifcfg-eth0配置文件，将ifcfg-eth0的配置文件里里面以前的关于MAC地址这一行删除掉或修改。另外克隆的服务器的IP设置的是静态IP，要么修改为一个其它的IP地址或设置为动态IP，重启网卡服务。</p>
<p>2.找到/etc/udev/rules.d/70-persistent-net.rules删除后重启机器，系统会自动生成一个70-persistent-net.rules文件。因为这个文件绑定了网卡和MAC地址，换了网卡以后MAC地址变了，所以不能正常启动，也可以直接编辑这个配置文件把里面的网卡和MAC地址修改成对应的，不过这样多麻烦，直接删除重启，它会自动生成个一个新的文件。 </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VMWare</tag>
        <tag>网络配置</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端如何让页面强制横屏</title>
    <url>/2019/03/07/Mobile-Page-Force-to-Landscape/</url>
    <content><![CDATA[<h3 id="Html页面结构如下："><a href="#Html页面结构如下：" class="headerlink" title="Html页面结构如下："></a>Html页面结构如下：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"webpBack"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"print"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation:</span> portrait) &#123;</span><br><span class="line">      <span class="selector-tag">html</span>&#123;</span><br><span class="line">         <span class="attribute">width </span>: <span class="number">100%</span> ;</span><br><span class="line">         <span class="attribute">height </span>: <span class="number">100%</span> ;</span><br><span class="line">          <span class="attribute">background-color</span>: white ;</span><br><span class="line">          <span class="attribute">overflow </span>: hidden;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">body</span>&#123;</span><br><span class="line">          <span class="attribute">width </span>: <span class="number">100%</span> ;</span><br><span class="line">         <span class="attribute">height </span>: <span class="number">100%</span> ;</span><br><span class="line">         <span class="attribute">background-color</span>: red ;</span><br><span class="line">          <span class="attribute">overflow </span>: hidden;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-id">#print</span>&#123;</span><br><span class="line">         <span class="attribute">position </span>: absolute ;</span><br><span class="line">         <span class="attribute">background-color</span>: yellow ;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation:</span> landscape) &#123;</span><br><span class="line">       <span class="selector-tag">html</span>&#123;</span><br><span class="line">         <span class="attribute">width </span>: <span class="number">100%</span> ;</span><br><span class="line">         <span class="attribute">height </span>: <span class="number">100%</span> ;</span><br><span class="line">         <span class="attribute">background-color</span>: white ;</span><br><span class="line">      &#125; </span><br><span class="line">       <span class="selector-tag">body</span>&#123;</span><br><span class="line">          <span class="attribute">width </span>: <span class="number">100%</span> ;</span><br><span class="line">         <span class="attribute">height </span>: <span class="number">100%</span> ;</span><br><span class="line">         <span class="attribute">background-color</span>: white ;</span><br><span class="line">      &#125;</span><br><span class="line">           <span class="selector-id">#print</span>&#123;</span><br><span class="line">            <span class="attribute">position </span>: absolute ;</span><br><span class="line">            <span class="attribute">top </span>: <span class="number">0</span> ; </span><br><span class="line">            <span class="attribute">left </span>: <span class="number">0</span> ;</span><br><span class="line">            <span class="attribute">width </span>: <span class="number">100%</span> ;</span><br><span class="line">            <span class="attribute">height </span>: <span class="number">100%</span> ;</span><br><span class="line">            <span class="attribute">background-color</span>: yellow ;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#print</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">margin</span>: auto ;</span><br><span class="line">        <span class="attribute">margin-top </span>: <span class="number">20px</span> ;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>把print这个div在竖屏模式下横过来，横屏状态下不变。所以在portrait下，没定义它的宽高。会通过下面的js来补。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line"> <span class="keyword">var</span> height =  <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line"> <span class="keyword">if</span>( width &lt; height )&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(width + <span class="string">" "</span> + height);</span><br><span class="line">     $print =  $(<span class="string">'#print'</span>);</span><br><span class="line">     $print.width(height);</span><br><span class="line">      $print.height(width);</span><br><span class="line">     $print.css(<span class="string">'top'</span>,  (height-width)/<span class="number">2</span> );</span><br><span class="line">     $print.css(<span class="string">'left'</span>,  <span class="number">0</span>-(height-width)/<span class="number">2</span> );</span><br><span class="line">     $print.css(<span class="string">'transform'</span> , <span class="string">'rotate(90deg)'</span>);</span><br><span class="line">      $print.css(<span class="string">'transform-origin'</span> , <span class="string">'50% 50%'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这里我们先取得了屏幕内可用区域的宽高，然后根据宽高的关系来判断是横屏还是竖屏。如果是竖屏，就把print这个div的宽高设置下，对齐，然后旋转。<br>最后，这么做带来的后果是，如果用户手机的旋转屏幕按钮开着，那么当手机横过来之后，会造成一定的悲剧。解决办法如下:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evt = <span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>;</span><br><span class="line">   <span class="built_in">window</span>.addEventListener(evt, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(evt);</span><br><span class="line">       <span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">        <span class="keyword">var</span> height =  <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">         $print =  $(<span class="string">'#print'</span>);</span><br><span class="line">        <span class="keyword">if</span>( width &gt; height )&#123;</span><br><span class="line">          </span><br><span class="line">           $print.width(width);</span><br><span class="line">           $print.height(height);</span><br><span class="line">           $print.css(<span class="string">'top'</span>,  <span class="number">0</span> );</span><br><span class="line">           $print.css(<span class="string">'left'</span>,  <span class="number">0</span> );</span><br><span class="line">           $print.css(<span class="string">'transform'</span> , <span class="string">'none'</span>);</span><br><span class="line">           $print.css(<span class="string">'transform-origin'</span> , <span class="string">'50% 50%'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">           $print.width(height);</span><br><span class="line">           $print.height(width);</span><br><span class="line">           $print.css(<span class="string">'top'</span>,  (height-width)/<span class="number">2</span> );</span><br><span class="line">           $print.css(<span class="string">'left'</span>,  <span class="number">0</span>-(height-width)/<span class="number">2</span> );</span><br><span class="line">           $print.css(<span class="string">'transform'</span> , <span class="string">'rotate(90deg)'</span>);</span><br><span class="line">           $print.css(<span class="string">'transform-origin'</span> , <span class="string">'50% 50%'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">   &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<p><a href="https://link.jianshu.com/?t=http://www.chubao.cn/s/godness/index.html" target="_blank" rel="noopener">Demo</a></p>
]]></content>
      <categories>
        <category>CSS3 $ Javascript</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>flush()用法以及ob_flush()和flush()的区别实例详解</title>
    <url>/2019/01/12/PHP-Diffences-Between-flush-and-ob-flush/</url>
    <content><![CDATA[<p>flush()函数将当前为止程序的所有输出发送到用户的浏览器。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">10</span>; $i&gt;<span class="number">0</span>; $i--) &#123; </span><br><span class="line">	<span class="keyword">echo</span> $i; </span><br><span class="line">	flush(); </span><br><span class="line">	sleep(<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>按照php手册里的说法<br>该函数将当前为止程序的所有输出发送到用户的浏览器。<br>上面的这段代码，应该隔一秒钟输出一次$i。但是实际中却不一定是这样。有可能是等了10秒钟后，所有的输出同时呈现出来。<br><a id="more"></a><br>好，我们来改一下这段代码，改成<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ob_end_clean();<span class="comment">//修改部分 </span></span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">10</span>; $i&gt;<span class="number">0</span>; $i--) &#123; </span><br><span class="line">	<span class="keyword">echo</span> $i; </span><br><span class="line">	flush(); </span><br><span class="line">	sleep(<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>嘿，加了这一句ob_end_clean();,居然就OK了。实际上，我们把ob_end_clean()换成ob_end_flush()也一样OK。<br>我再来改一改。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">10</span>; $i&gt;<span class="number">0</span>; $i--) &#123; </span><br><span class="line">	<span class="keyword">echo</span> $i; </span><br><span class="line">	ob_flush();<span class="comment">//修改部分 </span></span><br><span class="line">	flush(); </span><br><span class="line">	sleep(<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行一下，是不是发现$i也隔一秒输出一次了？这是为什么呢？<br>别急，我们来看看php.ini。<br>打开php.ini,搜索output_buffering，我们会看到类似这样的设置 output_buffering = 4096。正如它的名字output_buffering一样，这个设置的作用就是把输出缓冲一下，缓冲大小为4096bytes.<br>在我们的第一段代码里，之所以没有按预期的输出，正是因为这个output_buffering把那些输出都缓冲了。没达到4096bytes或者脚本结束，输出是不会被发送出去的。<br>而第二段代码中的ob_end_clean()和ob_end_flush()的作用，就是终止缓冲。这样就不用等到有4096bytes的缓冲之后才被发送出去了。<br>第三段代码中，用了一句ob_flush(),它的作用就是把缓冲的数据发送出去，但是并不会终止缓冲，所以它必须在每次flush()前使用。<br>如果不想使用ob_end_clean(),ob_end_flush()和ob_flush()，我们就必须把php.ini里的 output_buffering设得足够小，例如设为0。需要注意的是，如果你打算在脚本中使用ini_set(” output_buffering”,”0″)来设置，那么请停下来吧，这种方法是不行的。因为在脚本一开始的时候，缓冲设置就已经被载入，然后缓冲就开始了。<br>可能你会问了，既然ob_flush()是把缓冲的数据发送出去，那么为什么还需要用flush()???直接用下面这段代码不行吗？？<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">10</span>; $i&gt;<span class="number">0</span>; $i--) &#123; </span><br><span class="line">	<span class="keyword">echo</span> $i; </span><br><span class="line">	ob_flush(); </span><br><span class="line">	sleep(<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>请注意ob_flush()和flush()的区别。前者是把数据从PHP的缓冲中释放出来，后者是把不在缓冲中的或者说是被释放出来的数据发送到浏览器。所以当缓冲存在的时候，我们必须ob_flush()和flush()同时使用。<br>那是不是flush()在这里就是不可缺少的呢？不是的，我们还有另外一种方法，使得当有数据输出的时候，马上被发送到浏览器。下面这两段代码就是不需要使用flush()了。（当你把output_buffering设为0的时候，连ob_flush()和ob_end_clean()都不需要了）<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ob_implicit_flush(<span class="keyword">true</span>); </span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">10</span>; $i&gt;<span class="number">0</span>; $i--) &#123; </span><br><span class="line">	<span class="keyword">echo</span> $i; </span><br><span class="line">	ob_flush(); </span><br><span class="line">	sleep(<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ob_end_clean(); </span><br><span class="line">ob_implicit_flush(<span class="keyword">true</span>); </span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">10</span>; $i&gt;<span class="number">0</span>; $i--) &#123; </span><br><span class="line">	<span class="keyword">echo</span> $i; </span><br><span class="line">	sleep(<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>请注意看上面的ob_implicit_flush(true)，这个函数强制每当有输出的时候，即刻把输出发送到浏览器。这样就不需要每次输出（echo）后，都用flush()来发送到浏览器了。<br>以上所诉可能在某些浏览器中不成立。因为浏览器也有自己的规则。我是用Firefox1.5,IE6,opera8.5来测试的。其中opera就不能正常输出，因为它有一个规则，就是不遇到一个HTML标签，就绝对不输出，除非到脚本结束。而FireFox和IE还算比较正常的。<br>最后附上一段非常有趣的代码,作者为PuTTYshell。在一个脚本周期里，每次输出，都会把前一次的输出覆盖掉。<br>以下代码只在firefox下可用，其他浏览器并不支持multipart/x-mixed-replace的Content-Type.<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">'Content-type: multipart/x-mixed-replace;boundary=endofsection'</span>); </span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n--endofsection\n"</span>; </span><br><span class="line">$pmt = <span class="keyword">array</span>(<span class="string">"-"</span>, <span class="string">"\\"</span>, <span class="string">"|"</span>, <span class="string">"/"</span> ); </span><br><span class="line"><span class="keyword">for</span>( $i = <span class="number">0</span>; $i &lt;<span class="number">10</span>; $i ++ )&#123; </span><br><span class="line">	sleep(<span class="number">1</span>); </span><br><span class="line">	<span class="keyword">print</span> <span class="string">"Content-type: text/plain\n\n"</span>; </span><br><span class="line">	<span class="keyword">print</span> <span class="string">"Part $i\t"</span>.$pmt[$i % <span class="number">4</span>]; </span><br><span class="line">	<span class="keyword">print</span> <span class="string">"--endofsection\n"</span>; </span><br><span class="line">	ob_flush(); </span><br><span class="line">	flush(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/plain\n\n"</span>; </span><br><span class="line"><span class="keyword">print</span> <span class="string">"The end\n"</span>; </span><br><span class="line"><span class="keyword">print</span> <span class="string">"--endofsection--\n"</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>flush</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP防止跨域提交表单[非 http_referer 验证]</title>
    <url>/2018/01/31/PHP-Prevent-Cross-Domain-Submit-Form/</url>
    <content><![CDATA[<p>PHP开发中跨域表单提交解决办法，网上很多办法都是这样写的，通过判断HTTP_REFERER来验证来源，这个等于没做，别人既然都知道跨域提交了，随便写一段代码就模拟出referer，而你写的这一段验证等于0，下面介绍一个不通过使用验证码的手段来验证跨域提交,使用 session+token 验证</p>
<p>我们通过使用 session+token 凭证来设置一段 form 的唯一性，为每一个form都生成一个随机并加密的 token 验证数据，当完成提交，我们就销毁掉这个 token 从而达到form的有效性只有一次</p>
<a id="more"></a>
<p>1.编辑 form.php，开启session,并产生一个加密token保存到 session 中，并在form表单中加入一个隐藏域用来提交token<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  session_start();</span><br><span class="line">  $token = md5(mt_rand());</span><br><span class="line">  $_SESSION[<span class="string">'token'</span>] = $token;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">"form.php"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"token"</span> value=<span class="string">"&lt;?php echo $token?&gt;"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>
<p>2.编辑 post.php, 首先验证 token 是否合法，合法则处理请求，并销毁token，不合法则提示 bad request</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'token'</span>]))&#123;</span><br><span class="line">  <span class="keyword">if</span>($_POST[<span class="string">'token'</span>] == $_SESSION[<span class="string">'token'</span>])&#123;</span><br><span class="line">     <span class="keyword">echo</span> $_POST[<span class="string">'name'</span>];</span><br><span class="line">     <span class="keyword">unset</span>($_SESSION[<span class="string">'token'</span>]);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">'bad request&lt;br&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Cross Domain</tag>
      </tags>
  </entry>
  <entry>
    <title>The connection was reset on wamp</title>
    <url>/2018/11/13/The-connection-was-reset-on-wamp/</url>
    <content><![CDATA[<p>I have installed wamp server on my pc.Then I have installed a zend application. I put it in www directory. When I access that directory by localhost it just shows<br><code>The connection was reset</code>.This problem could not fix by increasing timeouts and memory limits.<br><code>Os:window 7(x64), Apache : 2.5, PHP:5.5.12, Mysql : 5.6.17</code></p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>Add the following to the end of httpd.conf to increase the Apache stack size to 8MB.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mpm_winnt_module&gt;</span><br><span class="line">   ThreadStackSize 8388608 <span class="comment">#用来控制堆栈大小</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
        <category>Wamp</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Wamp</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis CI自动构建hexo博客可能遇到的坑</title>
    <url>/2017/12/25/Travis-CI-Build-Hexo-Faqs/</url>
    <content><![CDATA[<h3 id="坑1-travis-CI构建一直提示github账户授权失败"><a href="#坑1-travis-CI构建一直提示github账户授权失败" class="headerlink" title="坑1:travis CI构建一直提示github账户授权失败"></a>坑1:travis CI构建一直提示github账户授权失败</h3><p>psersonal token问题，重新产生，并使用travis whoami判断token有效之后再配置travis CI environment variable</p>
<h3 id="坑2-travis-CI构建一直提示hexo-renderer-sass错误"><a href="#坑2-travis-CI构建一直提示hexo-renderer-sass错误" class="headerlink" title="坑2:travis CI构建一直提示hexo-renderer-sass错误"></a>坑2:travis CI构建一直提示hexo-renderer-sass错误</h3><p>在本地deploy并没有发生此问题，在travis vm中出现此问题，解决方式是在.travis.yml中增加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="坑3-travis-CI自动构建部署之后，博客页面空白，什么也没有"><a href="#坑3-travis-CI自动构建部署之后，博客页面空白，什么也没有" class="headerlink" title="坑3:travis CI自动构建部署之后，博客页面空白，什么也没有"></a>坑3:travis CI自动构建部署之后，博客页面空白，什么也没有</h3><p>将主题换回默认的landscape则可以正常显示内容。则锁定是next theme配置问题，check发现themes/next 中的内容被ignore了，并没有push到raw branch.<br>解决方法有二：</p>
<ul>
<li><p>使用.gitmodules，该方法会直接将next theme repository import进来，这样的好处是可以使用最新的next theme，坏处是没法客制化自己的主题配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[submodule &quot;next&quot;]</span><br><span class="line">    path = themes/next</span><br><span class="line">    url = https://github.com/iissnan/hexo-theme-next</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除themes/next的.git和.gitignore，然后就可以讲themes/next的内容push到repository中了</p>
</li>
</ul>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>1.在.travis.yml中将node_modules添加到cache中，可以加快构建速度<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br></pre></td></tr></table></figure></p>
<p>2.如果想在github的README.md显示构建成功与否的标示，可以修改README.md：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[build-info](https://travis-ci.org/userName/repoName.svg)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Travis</category>
      </categories>
      <tags>
        <tag>Travis</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 的cmd设置代理的问题</title>
    <url>/2018/08/27/Windows-Cmd-Set-Proxy/</url>
    <content><![CDATA[<h1 id="电脑通过设置代理来访问外网，则需要为cmd设置代理："><a href="#电脑通过设置代理来访问外网，则需要为cmd设置代理：" class="headerlink" title="电脑通过设置代理来访问外网，则需要为cmd设置代理："></a>电脑通过设置代理来访问外网，则需要为cmd设置代理：</h1><h2 id="1、首先打开-cmd-（win-R，输入-cmd，然后按-enter-键）"><a href="#1、首先打开-cmd-（win-R，输入-cmd，然后按-enter-键）" class="headerlink" title="1、首先打开 cmd （win + R，输入 cmd，然后按 enter 键）"></a>1、首先打开 cmd （win + R，输入 cmd，然后按 enter 键）</h2><h2 id="2、输入以下命令"><a href="#2、输入以下命令" class="headerlink" title="2、输入以下命令"></a>2、输入以下命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://127.0.0.1:1189</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://127.0.0.1:1189</span><br></pre></td></tr></table></figure>
<p>其中”:”后面的为自己的代理服务器的地址，可自行查阅<br>注意，代理服务器的地址的查看：谷歌浏览器——设置——高级——打开代理设置——局域网设置——复制代理服务器地址即可</p>
<h2 id="3、如果你的代理服务器要求用户名和密码的话，那么还需要："><a href="#3、如果你的代理服务器要求用户名和密码的话，那么还需要：" class="headerlink" title="3、如果你的代理服务器要求用户名和密码的话，那么还需要："></a>3、如果你的代理服务器要求用户名和密码的话，那么还需要：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy_user=</span><br><span class="line"><span class="built_in">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure>
<h2 id="4、设置完成之后就可以在-cmd-下正常使用网络了。"><a href="#4、设置完成之后就可以在-cmd-下正常使用网络了。" class="headerlink" title="4、设置完成之后就可以在 cmd 下正常使用网络了。"></a>4、设置完成之后就可以在 cmd 下正常使用网络了。</h2>]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP接入诺诺电子发票</title>
    <url>/2021/03/16/Php-Nuonuo-Elec-Invoice/</url>
    <content><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先开票公司必须使用的是航天信息的开票系统，有航天信息提供的开票软件客户端、金税盘等。然后要在诺诺电子发票服务平台注册企业账号，注意是企业账号，不是个人账号，地址：<a href="https://fp.jss.com.cn/" target="_blank" rel="noopener">https://fp.jss.com.cn</a> ，如果要开电票的话（诺诺发票服务平台也可以开普票纸票和专票），可能还要去税务局找航信公司人员办理电子签章等，航信一般在当地税务局有窗口办理业务。</p>
<p>注册和签章做完后，可以登录诺诺电子发票服务平台工作台。<br><a id="more"></a><br>这里还是简单介绍一下诺诺的各平台吧。<br>1.电子发票服务平台，诺诺提供的在线开票和发票管理平台，这里可以直接开票，前提是你已经办好了上述的一些手续，电子发票服务平台的工作台，可以直接开票，注意，这里不光可以开电子发票，还可以开纸质普票，专票，可以选择开票类型。</p>
<p>2.诺诺开放平台，如果你不使用诺诺提供的电子发票服务平台，或者要将电子发票引入到你自己的业务系统，那就要使用诺诺开放平台，地址:<a href="https://open.jss.com.cn/" target="_blank" rel="noopener">https://open.jss.com.cn</a> ，账号是通用的，可直接登录诺诺开放平台，在应用管理中，创建应用，一般应用类型是自用型应用，然后会分别给一个正式环境和沙箱环境的appkey和APP Secret，开放平台提供了开发文档和sdk，使用都很简单。</p>
<p>这里要注意，先去看文档找接口，那最重要的就是开票接口，平台的文档里没有开票接口文档，只有在注册了账号，创建了应用后，查看应用中提供了开票接口的文档……</p>
<p>3.诺诺开票软件，诺诺发票，诺诺电子发票等客户端，这些都是财务使用的，也许有的<br>财务只用其中一个或2个，所有这些客户端都需要插上金税盘。</p>
<h1 id="开票流程"><a href="#开票流程" class="headerlink" title="开票流程"></a>开票流程</h1><h2 id="普通的开票："><a href="#普通的开票：" class="headerlink" title="普通的开票："></a>普通的开票：</h2><p>公司财务直接在开票软件中开了，开票时填写开票信息等，如果开通了电子发票，开票软件中也可以开电子发票，开完后不用打印，直接将电子发票发送到开票信息中提供的手机和邮箱中了，也会提供电子发票的下载地址。</p>
<p>使用电子发票服务平台开票：<br>1.在公司财务电脑（有金税盘的）上打开诺诺发票，开启开票服务，然后数据就会在发票服务平台和公司财务的开票软件之间同步，下图是诺诺发票客户端开启发票服务的状态。<br>2.登录电子发票服务平台工作台，点击发票填开，填写发票信息，发票类型。提交开票。提交的时候会请求公司的财务电脑的诺诺发票同步数据，如果请求不成功，会提示相应的错误，如果请求成功，开票状态是待开。<br>3.如果是纸票和专票，在公司财务电脑上打开开票软件，发票管理或者开票界面导入中，有从电子发票服务平台提交过来的开票信息，导入打印开票。开票完成后，数据会同步到电子发票服务平台中，刷新的话发票状态已经变成开票完成了。如果是电子发票，同样会请求公司财务电脑诺诺发票，不过不需要手动打印开票，而是请求电子签章，完成后同样将数据同步回去。<br>所以公司的诺诺发票软件要一直保持开启开票服务的状态，不然无法从电子发票服务平台（也包括开放平台api）提交发票，但是有时候财务人员会拿金税盘到税务去办相关的业务，金税盘不插的话，诺诺发票和开票软件等客户端肯定无法正常使用，而且财务的电脑也不是服务器，也不可能一直保持开机状态，这种情况可能需要使用分机，办理了分机的话，会有一个分机税盘，然后要配置分机，这个可以下载一个诺言客户端咨询客服，客服会通过远程给协助配置。</p>
<h2 id="开放平台开票："><a href="#开放平台开票：" class="headerlink" title="开放平台开票："></a>开放平台开票：</h2><p>搞清楚电子发票服务平台后，那使用开放平台api就简单了，自己的业务系统中使用开发平台接口所完成的功能其实就是电子发票服务平台提供的功能的简化版，只是把一些功能通过api加到自己的业务系统中了，所以使用开放平台api开票，首先要调试电子发票服务平台能不能开票成功，如果电子发票服务平台开票不成功，api接口也不会调试成功！</p>
<p>所以，不管是电子发票服务平台，还是开放平台，最终开票请求都通过诺诺提交到了公司财务的开票电脑上了，开票电脑完成开票后返回开票的结果。</p>
<h3 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h3><p>这个就很简单了，主要使用三个接口：获取access_token，开票和查询，下载php的sdk。直接上代码：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="string">"../nuonuo/lib/Api.php"</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="获取access-token："><a href="#获取access-token：" class="headerlink" title="获取access_token："></a>获取access_token：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$appKey    = C(<span class="string">'invoice.appKey'</span>);</span><br><span class="line">$appSecret = C(<span class="string">'invoice.appSecret'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        $token = Api::getMerchantToken($appKey, $appSecret);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isJson($token)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$token = json_decode($token);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($token-&gt;access_token) || !<span class="keyword">isset</span>($token-&gt;expires_in)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $token-&gt;access_token;</span><br></pre></td></tr></table></figure>
<p>注意：access_token的调用限制是30天50次，需要本地缓存起来，在有效期内重复使用。</p>
<h4 id="开票请求："><a href="#开票请求：" class="headerlink" title="开票请求："></a>开票请求：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $appKey    = C(<span class="string">'invoice.appKey'</span>);</span><br><span class="line">        $appSecret = C(<span class="string">'invoice.appSecret'</span>);</span><br><span class="line">        $token     = <span class="keyword">self</span>::getMerchantToken();</span><br><span class="line">        $taxnum    = C(<span class="string">'invoice.salerTaxNum'</span>);</span><br><span class="line">        $url       = C(<span class="string">'invoice.url'</span>);</span><br><span class="line">        $method    = <span class="string">"nuonuo.electronInvoice.requestBilling"</span>;</span><br><span class="line">        $senid     = <span class="keyword">$this</span>-&gt;senid;</span><br><span class="line">        $body      = json_encode(</span><br><span class="line">            <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'order'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">'buyerName'</span> =&gt; stripslashes(<span class="keyword">$this</span>-&gt;buyerName),</span><br><span class="line">                    <span class="string">'buyerTaxNum'</span> =&gt; <span class="keyword">$this</span>-&gt;buyerTaxNum,</span><br><span class="line">                    <span class="string">'buyerTel'</span> =&gt; <span class="keyword">$this</span>-&gt;buyerTel,</span><br><span class="line">                    <span class="string">'buyerAddress'</span> =&gt; stripslashes(<span class="keyword">$this</span>-&gt;buyerAddress),</span><br><span class="line">                    <span class="string">'buyerAccount'</span> =&gt; stripslashes(<span class="keyword">$this</span>-&gt;buyerAccount),</span><br><span class="line">                    <span class="string">'orderNo'</span> =&gt; <span class="keyword">$this</span>-&gt;orderNo,</span><br><span class="line">                    <span class="string">'invoiceDate'</span> =&gt; <span class="keyword">$this</span>-&gt;invoiceDate,</span><br><span class="line">                    <span class="string">'clerk'</span> =&gt; <span class="keyword">$this</span>-&gt;clerk,</span><br><span class="line">                    <span class="string">'payee'</span> =&gt; C(<span class="string">'invoice.payee'</span>),</span><br><span class="line">                    <span class="string">'checker'</span> =&gt; C(<span class="string">'invoice.checker'</span>),</span><br><span class="line">                    <span class="string">'salerTaxNum'</span> =&gt; <span class="keyword">$this</span>-&gt;salerTaxNum,</span><br><span class="line">                    <span class="string">'salerTel'</span> =&gt; <span class="keyword">$this</span>-&gt;salerTel,</span><br><span class="line">                    <span class="string">'salerAddress'</span> =&gt; <span class="keyword">$this</span>-&gt;salerAddress,</span><br><span class="line">                    <span class="string">'salerAccount'</span> =&gt; <span class="keyword">$this</span>-&gt;salerAccount,</span><br><span class="line">                    <span class="string">'invoiceType'</span> =&gt; <span class="keyword">$this</span>-&gt;invoiceType,</span><br><span class="line">                    <span class="string">'pushMode'</span> =&gt; <span class="keyword">$this</span>-&gt;pushMode,</span><br><span class="line">                    <span class="string">'buyerPhone'</span> =&gt; <span class="keyword">$this</span>-&gt;buyerPhone,</span><br><span class="line">                    <span class="string">'email'</span> =&gt; <span class="keyword">$this</span>-&gt;email,</span><br><span class="line">                    <span class="string">'invoiceLine'</span> =&gt; <span class="keyword">$this</span>-&gt;invoiceLine,</span><br><span class="line">                    <span class="string">'invoiceDetail'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">'goodsName'</span> =&gt; <span class="keyword">$this</span>-&gt;goodsName,</span><br><span class="line">                        <span class="string">'goodsCode'</span> =&gt; <span class="keyword">$this</span>-&gt;goodsCode,</span><br><span class="line">                        <span class="string">'num'</span> =&gt; <span class="keyword">$this</span>-&gt;num,</span><br><span class="line">                        <span class="string">'price'</span> =&gt; <span class="keyword">$this</span>-&gt;price,</span><br><span class="line">                        <span class="string">'taxIncludedAmount'</span> =&gt; <span class="keyword">$this</span>-&gt;taxIncludedAmount,</span><br><span class="line">                        <span class="string">'withTaxFlag'</span> =&gt; <span class="keyword">$this</span>-&gt;withTaxFlag,</span><br><span class="line">                        <span class="string">'taxRate'</span> =&gt; <span class="keyword">$this</span>-&gt;taxRate,</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $res = Api::sendPostSyncRequest($url, $senid, $appKey, $appSecret, $token, $taxnum, $method, $body);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;message = $e-&gt;getMessage();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isJson($res)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;message = <span class="string">'发票请求失败'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $res = json_decode($res);</span><br><span class="line">        <span class="keyword">if</span> ($res-&gt;code !== <span class="string">'E0000'</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;message = $res-&gt;describe;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($res-&gt;result-&gt;invoiceSerialNum)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;message = <span class="string">'未收到发票流水号'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;invoiceSerialNum = $res-&gt;result-&gt;invoiceSerialNum;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;update_field(<span class="keyword">array</span>(<span class="string">'invoiceSerialNum'</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意：请求成功后，保存返回的发票流水号，用来查询开票结果。</p>
<h4 id="查询结果："><a href="#查询结果：" class="headerlink" title="查询结果："></a>查询结果：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">queryInvoice</span><span class="params">(array $serialNos)</span> </span>&#123;</span><br><span class="line">        $appKey    = C(<span class="string">'invoice.appKey'</span>);</span><br><span class="line">        $appSecret = C(<span class="string">'invoice.appSecret'</span>);</span><br><span class="line">        $token     = <span class="keyword">self</span>::getMerchantToken();</span><br><span class="line">        $taxnum    = C(<span class="string">'invoice.salerTaxNum'</span>);</span><br><span class="line">        $url       = C(<span class="string">'invoice.url'</span>);</span><br><span class="line">        $method    = <span class="string">"nuonuo.ElectronInvoice.queryInvoiceResult"</span>;</span><br><span class="line">        $senid     = uniqid();</span><br><span class="line"></span><br><span class="line">        $body = json_encode(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'serialNos'</span> =&gt; $serialNos,</span><br><span class="line">        ));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $res = Api::sendPostSyncRequest($url, $senid, $appKey, $appSecret, $token, $taxnum, $method, $body);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isJson($res)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $res = json_decode($res);</span><br><span class="line">        <span class="keyword">if</span> ($res-&gt;code !== <span class="string">'E0000'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($res-&gt;result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res-&gt;result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意：发票结果查询需要作为定时任务一直运行，然后将查询的结果更新到本地，可批量查询。<br>最新的接口中，请求发票的时候可以提交一个callbackUrl参数，这个url只有开票成功的时候才会回调，但官方网站没有提供回调请求的文档，个人认为这个参数还是不要使用了，因为光使用回调不使用定时查询的话是不够的，其他状态的发票也需要更新，如开票失败，签章失败，作废等，既然避免不了使用定时任务来更新发票状态，那就没必要做回调了。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>API</tag>
      </tags>
  </entry>
</search>
